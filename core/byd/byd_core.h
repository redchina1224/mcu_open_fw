#ifndef __ZDBYDCORE_H_
#define __ZDBYDCORE_H_

	#include "BF7512DMXX_XXXX.H"

	#include "absacc.h"
	#include "intrins.h"
	#include "stdlib.h"

	#define ZD_CLRWDT WDT_CTRL = 7;
	#define ZD_NOP _nop_()

	#define ZD_GIE EA
	#define ZD_GIE_ENABLE EA=1
	#define ZD_GIE_DISABLE EA=0


	#define ZD_T0IE_ENABLE IEN0|=0x02 //开Timer0中断使能 
	#define ZD_T0IE_DISABLE IEN0&=~0x02 //关Timer0中断使能
		
	#define ZD_T0IF_CLEAN TCON&=~0x20//清除Timer0中断标志
	#define ZD_T0IF_GRIGGER ((TCON&0x20)==0x20)

	#define ZD_T0_ENABLE TCON|=0X10 // 1为开启Timer0
	#define ZD_T0_DISABLE TCON&=~0X10 //0为停止Timer0
	
	#define ZD_INTERRUPT_INIT ZD_NOP//临时解决方案,需替换为关所有中断功能
	#define ZD_PORT_INIT 		PU_PA = 0x00;PU_PB = 0x00;PU_PC = 0x00;PU_PD = 0x00;PD_PB = 0x00;DATAA = 0x00;DATAB = 0x00;DATAC = 0x00;DATAD = 0x00;TRISA = 0x00;TRISB = 0x00;TRISC = 0x00;TRISD = 0x00;
								//临时解决方案,需替换为初始化所有IO的功能


	//#ifdef PORTA
	#define ZD_PORTA DATAA

	#define ZD_PORTA_DIR TRISA

	#define ZD_PORTA_7 PA7
	#define ZD_PORTA_6 PA6
	#define ZD_PORTA_5 PA5
	#define ZD_PORTA_4 PA4
	#define ZD_PORTA_3 PA3
	#define ZD_PORTA_2 PA2
	#define ZD_PORTA_1 PA1
	#define ZD_PORTA_0 PA0
	
	#define ZD_PORTA_PHRES PU_PA

	
	//#endif
	
	//#ifdef PORTB
	#define ZD_PORTB DATAB
	#define ZD_PORTB_DIR TRISB

	#define ZD_PORTB_7 PB7
	#define ZD_PORTB_6 PB6
	#define ZD_PORTB_5 PB5
	#define ZD_PORTB_4 PB4
	#define ZD_PORTB_3 PB3
	#define ZD_PORTB_2 PB2
	#define ZD_PORTB_1 PB1
	#define ZD_PORTB_0 PB0

	#define ZD_PORTB_PHRES PU_PB
	#define ZD_PORTB_PDRES PD_PB
	//#endif
	
	//#ifdef PORTC
	#define ZD_PORTC DATAC

	#define ZD_PORTC_DIR TRISC

	#define ZD_PORTC_7 PC7
	#define ZD_PORTC_6 PC6
	#define ZD_PORTC_5 PC5
	#define ZD_PORTC_4 PC4
	#define ZD_PORTC_3 PC3
	#define ZD_PORTC_2 PC2
	#define ZD_PORTC_1 PC1
	#define ZD_PORTC_0 PC0

	#define ZD_PORTC_PHRES PU_PC

	//#endif
	
	//#ifdef PORTD
	#define ZD_PORTD DATAD

	#define ZD_PORTD_DIR TRISD	

	#define ZD_PORTD_7 PD7
	#define ZD_PORTD_6 PD6
	#define ZD_PORTD_5 PD5
	#define ZD_PORTD_4 PD4
	#define ZD_PORTD_3 PD3
	#define ZD_PORTD_2 PD2
	#define ZD_PORTD_1 PD1
	#define ZD_PORTD_0 PD0

	#define ZD_PORTD_PHRES PU_PD


	//#endif


	#define ZD_PORT_OUTPUT_SET(gpdir,iobit) gpdir&=(~iobit)
	#define ZD_PORT_INPUT_SET(gpdir,iobit) gpdir|=iobit
	#define ZD_PORT_PHRES_SET(gpph,iobit) gpph|=(iobit)
	#define ZD_PORT_PDRES_SET(gppd,iobit) gppd|=(iobit)



	//#define ZD_TIMER_CLKSET(x) 

	
	#define BOR_ON {PD_ANA &= ~(0x08);}				   							//开掉电复位
	#define BOR_OFF {PD_ANA |= (0x08);}			   							  //关掉电复位
	#define V_BOR_SET(x) {BOR_LVDT_VTH &= ~(0x38);BOR_LVDT_VTH |= (0x38&(x<<3));}//设置掉电复位点:(0/1-保留）-(2-2.8V)-(3-3.3V)-(4-3.7V)-(5/6/7-4.2V)，默认为 2.1V
	#define BOR_DELAY_SET(x) {REG_ADDR = 0x2E;REG_DATA &= ~(0x04);REG_DATA |= (0x04&(x<<2));}//0延时1，1延时2;(延时参数见规格书)




	#define ZD_FSYS_CLKSET_FOSC_DIV2_DIV2  0x00
	#define ZD_FSYS_CLKSET_FOSC_DIV2_DIV4  0x01
	#define ZD_FSYS_CLKSET_FOSC_DIV2_DIV6  0x02
	#define ZD_FSYS_CLKSET_FOSC_DIV2_DIV24 0x03
	
	#define ZD_FSYS_CLKSET_DEFAULT ZD_FSYS_CLKSET_FOSC_DIV2_DIV2
	
	#define ZD_FSYS_CLKSET(clkset) SYS_CLK_CFG&=~(0x03);SYS_CLK_CFG|=(0x03&(clkset));


	//////////////////////////////////////////////////////
	#define ZD_ADC_CLKSET_FSYS_DIV8 0B00000000
	#define ZD_ADC_CLKSET_FSYS_DIV16 0B01000000
	#define ZD_ADC_CLKSET_FSYS_DIV32 0B10000000
	#define ZD_ADC_CLKSET_FRC 0B11000000
	
	#define ZD_ADC_CLKSET_DEFAULT ZD_ADC_CLKSET_FSYS_DIV8
	
	#define ZD_ADC_CLKSET(clkset) ADCON0&=(~(BIT7|BIT6)),ADCON0|=((clkset))
	
	
	//右对齐10位
	//#define ZD_ADC_INIT ADCON1|=(BIT7),ADCON0|=(BIT0)
	//左对齐12位
	#define ZD_ADC_INIT ADCON1&=(~BIT7),ADCON0|=(BIT0)
	/*
	#define ZD_ADC_CH1_ENABLE ZD_PORTA_DIR|=BIT1
	#define ZD_ADC_CH2_ENABLE ZD_PORTA_DIR|=BIT2
	#define ZD_ADC_CH3_ENABLE ZD_PORTA_DIR|=BIT3
	#define ZD_ADC_CH4_ENABLE ZD_PORTA_DIR|=BIT4
	#define ZD_ADC_CH5_ENABLE ZD_PORTA_DIR|=BIT5
	#define ZD_ADC_CH6_ENABLE ZD_PORTA_DIR|=BIT6
	#define ZD_ADC_CH7_ENABLE ZD_PORTA_DIR|=BIT7
	#define ZD_ADC_CH8_ENABLE ZD_PORTB_DIR|=BIT5
	#define ZD_ADC_CH9_ENABLE ZD_PORTB_DIR|=BIT4
	#define ZD_ADC_CH10_ENABLE ZD_PORTB_DIR|=BIT3
	#define ZD_ADC_CH11_ENABLE ZD_PORTB_DIR|=BIT2
	#define ZD_ADC_CH12_ENABLE ZD_PORTB_DIR|=BIT1
	#define ZD_ADC_CH13_ENABLE ZD_PORTB_DIR|=BIT0
	*/
	
	
	//CMS79F738
	#define ZD_ADC_CH0_ENABLE ZD_PORTA_DIR|=BIT0,ANSEL0|=BIT0
	#define ZD_ADC_CH1_ENABLE ZD_PORTA_DIR|=BIT1,ANSEL0|=BIT1
	#define ZD_ADC_CH2_ENABLE ZD_PORTA_DIR|=BIT2,ANSEL0|=BIT2
	#define ZD_ADC_CH3_ENABLE ZD_PORTA_DIR|=BIT3,ANSEL0|=BIT3
	#define ZD_ADC_CH4_ENABLE ZD_PORTA_DIR|=BIT4,ANSEL0|=BIT4
	#define ZD_ADC_CH5_ENABLE ZD_PORTA_DIR|=BIT5,ANSEL0|=BIT5
	#define ZD_ADC_CH6_ENABLE ZD_PORTA_DIR|=BIT6,ANSEL0|=BIT6
	#define ZD_ADC_CH7_ENABLE ZD_PORTA_DIR|=BIT7,ANSEL0|=BIT7
	#define ZD_ADC_CH8_ENABLE ZD_PORTB_DIR|=BIT0,ANSEL1|=BIT0
	#define ZD_ADC_CH9_ENABLE ZD_PORTB_DIR|=BIT1,ANSEL1|=BIT1
	#define ZD_ADC_CH10_ENABLE ZD_PORTB_DIR|=BIT2,ANSEL1|=BIT2
	#define ZD_ADC_CH11_ENABLE ZD_PORTB_DIR|=BIT3,ANSEL1|=BIT3
	#define ZD_ADC_CH12_ENABLE ZD_PORTB_DIR|=BIT4,ANSEL1|=BIT4
	#define ZD_ADC_CH13_ENABLE ZD_PORTB_DIR|=BIT5,ANSEL1|=BIT5
	#define ZD_ADC_CH14_ENABLE ZD_PORTB_DIR|=BIT6,ANSEL1|=BIT6

	#define ZD_ADC_CH15_ENABLE ZD_PORTD_DIR|=BIT2,ANSEL1|=BIT7
	#define ZD_ADC_CH16_ENABLE ZD_PORTC_DIR|=BIT7,ANSEL2|=BIT0
	#define ZD_ADC_CH17_ENABLE ZD_PORTC_DIR|=BIT6,ANSEL2|=BIT1
	#define ZD_ADC_CH18_ENABLE ZD_PORTC_DIR|=BIT5,ANSEL2|=BIT2
	#define ZD_ADC_CH19_ENABLE ZD_PORTC_DIR|=BIT4,ANSEL2|=BIT3
	#define ZD_ADC_CH20_ENABLE ZD_PORTC_DIR|=BIT3,ANSEL2|=BIT4
	#define ZD_ADC_CH21_ENABLE ZD_PORTC_DIR|=BIT2,ANSEL2|=BIT5
	#define ZD_ADC_CH22_ENABLE ZD_PORTC_DIR|=BIT1,ANSEL2|=BIT6
	#define ZD_ADC_CH23_ENABLE ZD_PORTC_DIR|=BIT0,ANSEL2|=BIT7
	
	#define ZD_ADC_CH24_ENABLE ZD_PORTD_DIR|=BIT1
	#define ZD_ADC_CH25_ENABLE ZD_PORTD_DIR|=BIT0
	
	
	
	 
	#define ZD_ADC_CH_SELECT(adch) ( ADCON0&=(~(BIT2|BIT3|BIT4|BIT5)),ADCON1&=(~(BIT6)),ADCON0|=(((adch)<<2)&(BIT2|BIT3|BIT4|BIT5)),ADCON1 |= (((adch)<<2)&BIT6) )

	//右对齐10位
	//#define ZD_ADC_GETVAL ((unsigned int)(ADRESH<<8|ADRESL))
	//左对齐12位
	#define ZD_ADC_GETVAL ((unsigned int)((ADRESH<<4)|(ADRESL>>4)))
	
	#define ZD_ADC_START ADCON0|=(BIT1);    
	#define ZD_ADC_ISBUSY (0!=(ADCON0&BIT1))     
	#define ZD_ADC_ISNOTBUSY (0==(ADCON0&BIT1))
	
	///////////////////////////////////////////////////////////////
	

	#define ZD_TIMER0_LOAD TMR0
	
	
	
	
	#define ZD_TIMER0_CLKSET_FSYS_DIV4 0x00
	#define ZD_TIMER0_CLKSET_T0CKI 0x20
	#define ZD_TIMER0_CLKSET_DEFAULT ZD_TIMER0_CLKSET_FSYS_DIV4
	
	#define ZD_TIMER0_CLKSET(clkset) OPTION_REG&=(~(BIT5)),OPTION_REG|=(clkset)

	///////////////////////////////////////////////////////////////
	#define ZD_TIMER0_CLKPSASET_NONE BIT3	
	#define ZD_TIMER0_CLKPSASET_DIV2 0
	#define ZD_TIMER0_CLKPSASET_DIV4 1
	#define ZD_TIMER0_CLKPSASET_DIV8 2
	#define ZD_TIMER0_CLKPSASET_DIV16 3
	#define ZD_TIMER0_CLKPSASET_DIV32 4
	#define ZD_TIMER0_CLKPSASET_DIV64 5
	#define ZD_TIMER0_CLKPSASET_DIV128 6
	#define ZD_TIMER0_CLKPSASET_DIV256 7
	
	#if(FocsClk>8000000)
	#define ZD_TIMER0_CLKPSASET_DEFAULT ZD_TIMER0_CLKPSASET_DIV2
	#else
	#define ZD_TIMER0_CLKPSASET_DEFAULT ZD_TIMER0_CLKPSASET_NONE
	#endif

	#define ZD_TIMER0_CLKPSASET(clkset) OPTION_REG&=(~(BIT0|BIT1|BIT2|BIT3)),OPTION_REG|=(clkset)
	
	#define ZD_TIMER0_INIT ZD_TIMER0_CLKSET(ZD_TIMER0_CLKSET_DEFAULT),ZD_TIMER0_CLKPSASET(ZD_TIMER0_CLKPSASET_DEFAULT)
	
	
	////////////////////////////////////////////////////////////////
	#define ZD_IAP_WRITEDATA_SET(x) 	EEDAT = (x)
	#define ZD_IAP_WRITEADDR_SET(x) 	EEADR = (x)

	#define ZD_IAP_READADDR_SET(x) 	EEADR = (x)
		
	#define ZD_IAP_DATAAREA_SET(x) 	EEPGD = (x)
	#define ZD_IAP_DATAAREA_EEPROM 	ZD_IAP_DATAAREA_SET(0)
	
	#define ZD_IAP_READ_START 		RD=1
	#define ZD_IAP_WRITE_START 		EECON1|=0x30,WREN=1,EECON2=0x55,EECON2=0xaa,WR=1
	#define ZD_IAP_WRITE_NOT_OVER 		(WR==1)
	


	#define ZD_IAP_DATAREAD(x) 		ZD_IAP_READADDR_SET(x),ZD_IAP_READ_START
	#define ZD_IAP_DATA EEDAT
	#define ZD_IAP_END WREN=0

	
	#define ZD_TOUCH_KEY_CH(x) C_KCHS##x
	
	#define ZD_UART1_TXBUF TXREG
	#define ZD_UART1_RXBUF RCREG




#endif